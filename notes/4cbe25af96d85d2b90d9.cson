type: "SNIPPET_NOTE"
folder: "01ec837f67a924176a83"
title: "get_distance : 12/06 , 11:22"
description: '''
  get_distance : 12/06 , 11:22
  Fixed heap corruption due to array size mismatch
'''
snippets: [
  {
    name: ""
    mode: "text"
    content: '''
      /*!
      \\based on example get_distance.cpp Obtains distance data
      \\by author Satofumi KAMIMURA
      
      modified by Sonny Kurniawan, initial draft at 2017/11/01
      */
      
      #include "Urg_driver.h"
      #include "Connection_information.h"
      #include "math_utilities.h"
      #include <iostream>
      #include <numeric>
      
      // oscpack
      #include <ip/UdpSocket.h>
      #include <osc/OscOutboundPacketStream.h>
      
      // OPENCV
      #include <stdio.h>
      #include "opencv2/core/core.hpp"
      #include "opencv2/highgui/highgui.hpp"
      #include "opencv2/imgproc/imgproc.hpp"
      
      #include "get_data.h"
      
      using namespace qrk;
      using namespace std;
      
      #define ADDRESS "127.0.0.1"
      #define PORT 5001
      
      #define OUTPUT_BUFFER_SIZE 1024
      #define MAXIMUM_POINT_DISTANCE_Y_DIRECTION 200
      
      // 実座標 (mm)
      float urg_min_x = 200.0, urg_min_y = -1800.0, urg_max_x = 1800.0, urg_max_y = 2000.0;
      float max_distance_preset = 500.0;
      cv::Point2f urg_pt[] = {
      	cv::Point2f(0, 0),  // 左上
      	cv::Point2f(0, 0),  // 左下
      	cv::Point2f(0, 0),  // 右下
      	cv::Point2f(0, 0) }; // 右上
      
      const cv::Point2f unity_pt_3d[] = {
      	// x 左右 , y 上下
      	cv::Point2f(-23.0 , -0.3),  // 左上
      	cv::Point2f(-23.0 , -12.0),    // 左下
      	cv::Point2f(23.0 , -12.0),   // 右下
      	cv::Point2f(23.0 , -0.3) };  // 右上
      
      								 // homography 行列を算出
      cv::Mat homography_matrix = cv::getPerspectiveTransform(urg_pt, unity_pt_3d);
      
      namespace
      {
      	double DistanceOfPointsYDirection(double p1_x, double p1_y, double p2_x, double p2_y);
      	void print_data(const Urg_driver& urg,
      		const vector<long>& data, long time_stamp)
      	{
      #if 0
      		// 前方のデータのみを表示
      		int front_index = urg.step2index(0);
      		cout << data[front_index] << " [mm], ("
      			<< time_stamp << " [msec])" << endl;
      #else
      		// 全てのデータの X-Y の位置を表示
      		long min_distance = urg.min_distance();
      		long max_distance = urg.max_distance();
      		max_distance = max_distance_preset;
      
      		// Variables to hold multi touch position data
      		vector<float> avgx(4);
      		vector<float> avgy(4);
      
      		// Group of points that hold distance information
      		vector<vector<float>> vx(4);
      		vector<vector<float>> vy(4);
      
      		int step = 0;
      		int prev = 0;
      		int current_index = 0;
      
      		cout << "min:" << min_distance << "[mm] max: " << max_distance << "[mm] time: " << time_stamp << endl;
      
      		size_t data_n = data.size();
      #ifdef DEBUG
      		cout << "data point=" << data_n << endl;
      #endif
      
      		for (size_t i = 0; i < data_n; i++) {
      			long l = data[i];
      
      			double radian = urg.index2rad(i);
      			if ((l <= min_distance) || (l >= max_distance)) {
      				continue;
      			}
      
      			long x = static_cast<long>(l * cos(radian));
      			long y = static_cast<long>(l * sin(radian));
      
      			//account for floor and other obstacles
      			if (x > urg_max_x || x < urg_min_x || y > urg_max_y || y < urg_min_y) {
      				continue;
      			}
      
      			/* The point is within valid range and we process it to detect hands */
      			// 3x1 matrix
      			cv::Mat urgPosMat = (cv::Mat_<double>(3, 1) << (double)x, (double)y, 1.0);
      			cv::Mat unityPosMat = homography_matrix * urgPosMat;
      
      			float ux = (float)urgPosMat.at<double>(0, 0);
      			float uy = (float)urgPosMat.at<double>(1, 0);
      
      			step = i;
      			
      			if (current_index < 5) {
      
      
      				if (step - prev < 20) {
      					vx[current_index - 1].push_back(ux);
      					vy[current_index - 1].push_back(uy);
      					cout << "Current index is : " << current_index - 1 << endl;
      				}
      				else {
      					cout << "step - prev = " << step - prev << endl;
      					current_index++;
      				}
      			}
      			prev = step;
      
      #ifdef DEBUG
      			std::cout << "(" << x << ", " << y << ") => (" << ux << ", " << uy << ")" << " rad: " << i << " dist: " << l << " [mm]" << std::endl;
      #endif
      		}
      		cout << endl;
      		cout << "Length 0f vx after loop: " << vx[0].size() << endl;
      
      		// For every group, make sure there are more than 3 points and take their average
      		for (int i = 0; i < 4; i++) {
      			if (vx[i].size() > 2) {
      				float size = vx[i].size();
      				float sum = std::accumulate(vx[i].begin(), vx[i].end(), 0);
      				avgx[i] = sum / size;
      				float sizey = vy[i].size();
      				float sumy = std::accumulate(vy[i].begin(), vy[i].end(), 0);
      				avgy[i] = sumy / sizey;
      			}
      			else {
      				avgx[i] = 0;
      				avgy[i] = 0;
      			}
      		}
      		if (vx[0].size() > 2) {
      
      			UdpTransmitSocket transmitSocket(IpEndpointName(ADDRESS, PORT));
      			char buffer[OUTPUT_BUFFER_SIZE];
      			osc::OutboundPacketStream ps(buffer, OUTPUT_BUFFER_SIZE);
      			char str[200];
      
      			sprintf(str, "%f, %f, %f, %f, %f, %f, %f, %f", avgx[0], avgy[0], avgx[1], avgy[1], avgx[2], avgy[2], avgx[3], avgy[3]);
      
      			char *toSendText = str;
      			transmitSocket.Send(toSendText, strlen(toSendText) + 1);
      		}
      #endif
      	}
      
      	double DistanceOfPointsYDirection(double p1_x, double p1_y, double p2_x, double p2_y) {
      		double dist = 0;
      		dist = sqrt(((p2_y - p1_y) * (p2_y - p1_y)) + ((p2_x - p1_x)*(p2_x - p1_x)));
      		return dist;
      	}
      
      }
      
      int main(int argc, char *argv[])
      {
      	for (int i = 0; i < argc; i++) {
      		std::cout << "Parameter input : " << argv[i] << endl;
      	}
      
      	if (argc < 5) {
      		std::cout << "Please input min and max values for x and y" << endl;
      		std::cout << "Usage : urglaserrange.exe {min X value} {min Y value} {max X value} {max Y value} {max_distance_preset} -e" << endl;
      		std::cout << "Options : " << endl;
      		std::cout << " e : Connected with ethernet/LAN cable" << endl;
      		return 1;
      	}
      	else {
      		urg_min_x = atof(argv[1]); urg_min_y = atof(argv[2]); urg_max_x = atof(argv[3]); urg_max_y = atof(argv[4]);
      		max_distance_preset = atof(argv[5]);
      		urg_pt[0] = cv::Point2f(urg_min_x, urg_min_y);
      		urg_pt[1] = cv::Point2f(urg_max_x, urg_min_y);
      		urg_pt[2] = cv::Point2f(urg_max_x, urg_max_y);
      		urg_pt[3] = cv::Point2f(urg_min_x, urg_max_y);
      	}
      	Connection_information information(argc, argv);
      
      	// 接続
      	Urg_driver urg;
      	if (!urg.open(information.device_or_ip_name(),
      		information.baudrate_or_port_number(),
      		information.connection_type())) {
      		std::cout << "Urg_driver::open(): "
      			<< information.device_or_ip_name() << ": " << urg.what() << endl;
      		return 1;
      	}
      
      	// データ取得
      #if 1
      	// データの取得範囲を変更する場合
      	urg.set_scanning_parameter(urg.deg2step(-90), urg.deg2step(+90), 0);
      #endif
      	long last_time_stamp = 0;
      
      	while (1) {
      		urg.start_measurement(Urg_driver::Distance, Urg_driver::Infinity_times, 0);
      		vector<long> data;
      		long time_stamp = 0;
      
      		if (!urg.get_distance(data, &time_stamp)) {
      			std::cout << "Urg_driver::get_distance(): " << urg.what() << endl;
      			urg.start_measurement(Urg_driver::Distance, Urg_driver::Infinity_times, 0);
      			//            return 1;
      		}
      
      #ifdef DEBUG
      		cout << "curr: " << time_stamp << " last: " << last_time_stamp << " diff: " << time_stamp - last_time_stamp;
      #endif
      
      		if (time_stamp - last_time_stamp < 1000) {
      			print_data(urg, data, time_stamp);
      		}
      		last_time_stamp = time_stamp;
      
      		// Key Check
      		const int key = cv::waitKey(10);
      		if (key == 'q') {
      			break;
      		}
      
      
      	}
      
      #if defined(URG_MSC)
      	getchar();
      #endif
      	return 0;
      }
    '''
  }
]
tags: []
isStarred: false
isTrashed: true
createdAt: "2017-12-06T02:22:20.235Z"
updatedAt: "2020-04-01T05:52:58.606Z"
