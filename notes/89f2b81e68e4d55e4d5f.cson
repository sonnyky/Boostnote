type: "SNIPPET_NOTE"
folder: "da4693d7ad2ea2038215"
title: "Detect squares"
description: "Detect squares"
snippets: [
  {
    name: ""
    mode: "text"
    content: '''
      inline void Kinect::DetectSquares(Mat input) {
      	cv::Mat dst;
      	std::vector<std::vector<cv::Point>> contours;
      	// Convert to grayscale
      	Mat gray; Mat bw;
      	cv::cvtColor(input, gray, CV_BGR2GRAY);
      	blur(gray, bw, Size(3, 3));
      	cv::Canny(gray, bw, 80, 240, 3);
      	cv::findContours(bw.clone(), contours, CV_RETR_EXTERNAL, CV_CHAIN_APPROX_SIMPLE);
      	std::vector<Point> approx;
      	input.copyTo(dst);
      	cv::Rect bounding_rect;
      
      	for (int i = 0; i < contours.size(); i++)
      	{
      		bounding_rect = boundingRect(contours[i]);
      		// Approximate contour with accuracy proportional
      		// to the contour perimeter
      		cv::approxPolyDP(cv::Mat(contours[i]), approx, cv::arcLength(cv::Mat(contours[i]), true)*0.02, true);
      
      		// Skip small or non-convex objects
      		if (std::fabs(cv::contourArea(contours[i])) < 100 || !cv::isContourConvex(approx))
      			continue;
      
      		 if (approx.size() >= 4 && approx.size() <= 6)
      		{
      			// Number of vertices of polygonal curve
      			int vtc = approx.size();
      
      			// Get the cosines of all corners
      			std::vector<double> cos;
      			for (int j = 2; j < vtc + 1; j++)
      				cos.push_back(angle(approx[j%vtc], approx[j - 2], approx[j - 1]));
      
      			// Sort ascending the cosine values
      			std::sort(cos.begin(), cos.end());
      
      			// Get the lowest and the highest cosine
      			double mincos = cos.front();
      			double maxcos = cos.back();
      
      			// Use the degrees obtained above and the number of vertices
      			// to determine the shape of the contour
      			//if (vtc == 4) {
      				rectangle(colorMat, bounding_rect, Scalar(0, 255, 0), 2, 8, 0);
      				setLabel(dst, "RECT", contours[i]);
      			//}
      
      		}
      	}
      	cv::imshow("dst", dst);
      }
      
    '''
  }
]
tags: []
isStarred: false
isTrashed: false
createdAt: "2017-11-25T14:17:22.795Z"
updatedAt: "2017-11-25T14:17:29.054Z"
