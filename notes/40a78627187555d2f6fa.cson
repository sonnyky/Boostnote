type: "SNIPPET_NOTE"
folder: "da4693d7ad2ea2038215"
title: "Find skin color"
description: "Find skin color"
snippets: [
  {
    name: ""
    mode: "text"
    content: '''
      inline cv::Rect Kinect::filterSkinColor(cv::Mat input)
      {
      	int largest_area = 0;
      	int largest_contour_index = 0;
      	cv::Rect bounding_rect;
      	//YCrCb threshold
      	// You can change the values and see what happens
      	int Y_MIN = 0;
      	int Y_MAX = 255;
      	int Cr_MIN = 133;
      	int Cr_MAX = 173;
      	int Cb_MIN = 77;
      	int Cb_MAX = 127;
      	cv::Mat skin, mask, mask_grey;
      	//first convert our RGB image to YCrCb
      	cv::cvtColor(input, skin, cv::COLOR_BGR2YCrCb);
      	mask = skin.clone();
      	//filter the image in YCrCb color space
      	cv::inRange(skin, cv::Scalar(Y_MIN, Cr_MIN, Cb_MIN), cv::Scalar(Y_MAX, Cr_MAX, Cb_MAX), mask);
      	std::vector<std::vector<cv::Point>> contours; // Vector for storing contour
      	std::vector<cv::Vec4i> hierarchy;
      
      	findContours(mask, contours, hierarchy, CV_RETR_EXTERNAL, CV_CHAIN_APPROX_SIMPLE); // Find the contours in the image
      
      	for (int i = 0; i< contours.size(); i++) // iterate through each contour. 
      	{
      		double a = cv::contourArea(contours[i], false);  //  Find the area of contour
      		if (a < 100) continue;
      		std::vector<std::vector<cv::Point> > hull(1);
      		bounding_rect = boundingRect(contours[i]);
      
      		if (bounding_rect.width * bounding_rect.height < 3600) continue;
      
      		Scalar color(255, 255, 255);
      		drawContours(skin, contours, i, color, CV_FILLED, 8, hierarchy);
      		cv::convexHull(cv::Mat(contours[i]), hull[0], false);
      		cv::drawContours(skin, hull, 0, cv::Scalar(255, 0, 0), 3);
      		rectangle(skin, bounding_rect, Scalar(0, 255, 0), 2, 8, 0);
      		if (hull[0].size() > 2)
      		{
      			std::vector<int> hullIndexes;
      			cv::convexHull(cv::Mat(contours[i]), hullIndexes, true);
      			std::vector<cv::Vec4i> convexityDefects;
      			cv::convexityDefects(cv::Mat(contours[i]), hullIndexes, convexityDefects);
      			for (size_t j = 0; j < convexityDefects.size(); j++)
      			{
      				cv::Point p1 = contours[i][convexityDefects[j][0]];
      				cv::Point p2 = contours[i][convexityDefects[j][1]];
      				cv::Point p3 = contours[i][convexityDefects[j][2]];
      				cv::line(skin, p1, p3, cv::Scalar(255, 0, 0), 2);
      				cv::line(skin, p3, p2, cv::Scalar(255, 0, 0), 2);
      			}
      		}
      	}
      
      	imshow("skin", skin);
      
      	return bounding_rect;
      }
    '''
  }
]
tags: []
isStarred: false
isTrashed: false
createdAt: "2017-11-25T14:16:26.514Z"
updatedAt: "2017-11-25T14:16:32.794Z"
